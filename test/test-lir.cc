#include "test.h"
#include <parser.h>
#include <ast.h>
#include <hir.h>
#include <hir-inl.h>
#include <lir.h>
#include <lir-inl.h>

TEST_START(lir)
  // Simpliest
  LIR_TEST("return 1\n",
           "# Block 0\n"
           "0: Label\n"
           "2: Entry\n"
           "4: r4:rax = Literal[1]\n"
           "6: @r0:rax = Move r4:rax\n"
           "8: Return @r0:rax\n\n")

  LIR_TEST("return 1 + 2\n",
           "# Block 0\n"
           "0: Label\n"
           "2: Entry\n"
           "4: r4:rax = Literal[1]\n"
           "6: r5:rbx = Literal[2]\n"
           "8: @r1:rbx = Move r5:rbx\n"
           "10: @r0:rax = Move r4:rax\n"
           "12: @r0:rax = BinOp @r0:rax, @r1:rbx\n"
           "14: r6:rax = Move @r0:rax\n"
           "16: @r0:rax = Move r6:rax\n"
           "18: Return @r0:rax\n\n")

  // Ifs
  LIR_TEST("if (true) { a = 1 } else { a = 2}\nreturn a\n",
           "# Block 0\n"
           "0: Label\n"
           "2: Entry\n"
           "4: r4:rax = Literal[true]\n"
           "6: @r0:rax = Move r4:rax\n"
           "8: Branch @r0:rax (10), (18)\n"
           "\n"
           "# Block 1\n"
           "# in: , out: 6\n"
           "10: Label\n"
           "12: r5:rax = Literal[1]\n"
           "14: r6:rax = Move r5:rax\n"
           "16: Goto (26)\n"
           "\n"
           "# Block 2\n"
           "# in: , out: 6\n"
           "18: Label\n"
           "20: r7:rax = Literal[2]\n"
           "22: r6:rax = Move r7:rax\n"
           "\n"
           "# Block 3\n"
           "# in: 6, out: \n"
           "26: Label\n"
           "28: r8:rax = Phi r6:rax\n"
           "30: @r0:rax = Move r8:rax\n"
           "32: Return @r0:rax\n\n")

  LIR_TEST("pass_through = 1\n"
           "while (i < 10) { i++ }\n"
           "return i + pass_through",
           "# Block 0\n"
           "# in: , out: 6, 4\n"
           "0: Label\n"
           "2: Entry\n"
           "4: r4:rcx = Literal[1]\n"
           "6: r5:rax = Nil\n"
           "8: r6:rax = Move r5:rax\n"
           "\n"
           "# Block 1\n"
           "# in: 6, 4, out: 7, 4\n"
           "12: Label\n"
           "14: r7:rdx = Phi r6:rax\n"
           "\n"
           "# Block 2\n"
           "# in: 7, 4, out: 7, 4\n"
           "18: Label\n"
           "20: r8:rax = Literal[10]\n"
           "22: @r1:rbx = Move r8:rax\n"
           "23: Gap[r4:rcx => s13:0, r7:rdx => s14:1]\n"
           "24: @r0:rax = Move s14:1\n"
           "26: @r0:rax = BinOp @r0:rax, @r1:rbx\n"
           "28: r9:rax = Move @r0:rax\n"
           "30: @r0:rax = Move r9:rax\n"
           "32: Branch @r0:rax (34), (54)\n"
           "\n"
           "# Block 3\n"
           "# in: 7, 4, out: 11, 4\n"
           "34: Label\n"
           "36: r10:rax = Literal[1]\n"
           "38: @r1:rbx = Move s14:1\n"
           "40: @r0:rax = Move r10:rax\n"
           "42: @r0:rax = BinOp @r0:rax, @r1:rbx\n"
           "44: r11:rax = Move @r0:rax\n"
           "\n"
           "# Block 4\n"
           "# in: 11, 4, out: 6, 4\n"
           "48: Label\n"
           "50: r6:rax = Move r11:rax\n"
           "51: Gap[s13:0 => r4:rcx]\n"
           "52: Goto (12)\n"
           "\n"
           "# Block 5\n"
           "# in: 4, 7, out: 4, 7\n"
           "54: Label\n"
           "\n"
           "# Block 6\n"
           "# in: 4, 7, out: \n"
           "58: Label\n"
           "60: @r1:rbx = Move s13:0\n"
           "62: @r0:rax = Move s14:1\n"
           "64: @r0:rax = BinOp @r0:rax, @r1:rbx\n"
           "66: r12:rax = Move @r0:rax\n"
           "68: @r0:rax = Move r12:rax\n"
           "70: Return @r0:rax\n\n")
TEST_END(lir)
