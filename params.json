{"name":"Candor","body":"# Candor\r\n\r\nCandor is a language inspired by javascript, but with less features and,\r\ntherefore, less complexity. So no semicolons, no exceptions and simplified\r\nanonymous function syntax (dart-like).\r\n\r\nMain goal of Candor is to provide a powerful and developer-friendly language\r\nthat can be easily optimized by compiler.\r\n\r\n## Description\r\n\r\nExperimental implementation of Candor language VM. Join #candor channel on\r\nirc.freenode.net and\r\n[official google group](https://groups.google.com/forum/?fromgroups&hl=en#!forum/candorlang)\r\nto discuss language features.\r\n\r\n**Danger! This whole project is not stable at all, many things are broken and\r\nmay/will change in future**\r\n\r\nNote: only x64 is supported now.\r\n\r\n## Example\r\n\r\n```candor\r\n// Defining a recursive function\r\nfactorial(x) {\r\n  if (x == 1) return 1\r\n  return x * factorial(x - 1)\r\n}\r\n\r\nfactorial(10)\r\n\r\n// Implementing a forEach function\r\nforEach(array, callback) {\r\n  if (typeof array != \"array\") return\r\n  length = sizeof array\r\n  i = 0\r\n  while (i < length) {\r\n    callback(i, array[i])\r\n    i++\r\n  }\r\n}\r\n\r\n// Implementing switch with chained if..else\r\ntype = typeof value\r\nif      (type == \"nil\")     handleNil(value)\r\nelse if (type == \"boolean\") handleBoolean(value)\r\nelse if (type == \"number\")  handleNumber(value)\r\nelse if (type == \"string\")  handleString(value)\r\nelse handleObject(value)\r\n\r\n// Implementing switch using objects\r\nhandlers = {\r\n  \"nil\":     handleNil,\r\n  \"boolean\": handleBoolean,\r\n  \"number\":  handleNumber,\r\n  \"string\":  handleString\r\n}\r\nhandler = handlers[typeof value]\r\nif (handler) handler(value)\r\nelse handleObject(value)\r\n\r\n```\r\n\r\nAs you can see, there're no semicolons, statements are separated by newline\r\nsymbols (whitespace is ignored).\r\n\r\n## Language basics\r\n\r\nCandor is essentially inspired by the [ECMA-script](http://www.ecmascript.org/),\r\nbut has much less features and complexity (for compiler).\r\n\r\nFunctions are declared in [dart](http://www.dartlang.org/)-like style, variables\r\nare implicitly scoped (i.e. if variable has no use in outer scopes, it'll be\r\nallocated in one where you declared it).\r\n\r\n```candor\r\n// Keywords: nil, true, false, typeof, sizeof, keysof, if, else, while,\r\n// for, break, continue, return, new\r\n\r\n// Primitives\r\nnil\r\ntrue\r\nfalse\r\nNaN\r\n1\r\n'abc'\r\n\"abc\"\r\n[1, 2, 3]\r\n{ a: 1, 'b': 2, \"c\": 3 }\r\n\r\n// Variables and objects\r\na = 1\r\na.b = \"abc\"\r\na.b.c = a\r\na[b()][c] = x\r\n\r\ndelete a[b] // removes key and value from object\r\n\r\n// While object literals are restricted to declaring strings as keys, any value\r\n// can be used as a key. This allows for all kinds of interesting data\r\n// structures like efficient sets and unique unguessable keys.\r\na = { \"5\": \"five\" }\r\na[5] = 5\r\na[\"5\"]         // -> \"five\"\r\na[5]           // -> 5\r\na[{ hello: \"World\" }] = \"key is object, value is string!\"\r\n\r\n// Functions\r\na() {\r\n  return 1\r\n}\r\na()\r\n// Functions are also objects and can have properties\r\na.b = \"foo\"\r\n\r\n// Arrays are also objects, except they internally keep track of the largest\r\n// integer index so that sizeof works with them.\r\na = [1,2,3]\r\na.foo = true\r\nsizeof a       // -> 3\r\na.foo          // -> true\r\n\r\n// typeof.  Sometimes it's useful to know what type a variable is\r\n\r\ntypeof nil     // -> \"nil\"\r\ntypeof true    // -> \"boolean\"\r\ntypeof false   // -> \"boolean\"\r\ntypeof 42      // -> \"number\"\r\ntypeof \"Hello\" // -> \"string\"\r\ntypeof [1,2,3] // -> \"array\"\r\ntypeof {a: 5}  // -> \"object\"\r\ntypeof (){}    // -> \"function\"\r\n\r\n// sizeof gives the size of an array (max integer key + 1) or string (number of bytes)\r\n// gives nil for other types\r\n\r\nsizeof \"Hello\" // -> 5\r\nsizeof [1,2,3] // -> 3\r\nsizeof {}      // -> 0\r\n\r\n// keysof returns an array of all the keys in an object\r\nkeys = keysof { name: \"Tim\", age: 29 }\r\nkeys           // -> [\"name\", \"age\"]\r\n\r\n// Control flow\r\n\r\n// The variables in the condition head are scoped with the condition, not the\r\n// optional body block.\r\n\r\n// Conditionals\r\nperson = { age: 29, name: \"Tim\" }\r\n\r\n// With block\r\nif (person.age > 18) {\r\n  person.name  // -> \"Tim\"\r\n}\r\n\r\n// Without block\r\nif (person.age > 18) person.name\r\n\r\n// using else\r\nif (person.age > 18) {\r\n  // do something with `person`\r\n} else {\r\n  // do something else\r\n}\r\n\r\nif (person.age > 18) action(person)\r\nelse otherAction()\r\n\r\n// While loops\r\ni = 0\r\nsum = 0\r\nwhile (i < 10) {\r\n  sum = sum + i\r\n  i++\r\n}\r\n\r\n// break and continue. `while` loop can have `break` and `continue`\r\n// break exits a loop immediately, continue, skips to the next iteration\r\n\r\n// Object Oriented Programming\r\n\r\n// There are no dynamic prototypes in candor, but there is a fast-clone\r\n// operation and special method calling syntax to make OOP style programming\r\n// possible if you prefer that style.\r\n\r\n// Create a prototype object\r\nRectangle = {\r\n  getArea: (self) {\r\n    return self.w * self.h\r\n  },\r\n  initialize: (self, w, h) {\r\n    self.w = w\r\n    self.h = h\r\n  }\r\n}\r\n\r\n// First create a fast shallow clone of the Rectangle prototype\r\nrect = clone Rectangle\r\n\r\n// Then initialize it using a one of the functions\r\nrect.initialize(rect, 3, 5)\r\n\r\n// Now we can use this object\r\nrect.getArea(rect) // -> 15\r\n\r\n// To make calling methods easier, there is special syntax sugar using `:`\r\n// instead of `.` for function calls. It means to call the function with\r\n// whatever is left of the `:` as the first argument.\r\n\r\n// The previous two calls can be written as:\r\nrect:initialize(3, 5)\r\nrect:getArea() // -> 15\r\n```\r\n\r\n## Building\r\n\r\n```bash\r\ngit clone git://github.com/indutny/candor.git\r\ncd candor\r\nmake test\r\n```\r\n\r\n## Status of project\r\n\r\nThings that are implemented currently:\r\n\r\n* Language lexer and parser\r\n* Assigning on-stack and context variables\r\n* Binary and unary operations\r\n* Unboxing of heap numbers\r\n* Floating point operations\r\n* Function calls, passing arguments and using returned value\r\n* Stop-the-world copying two-space garbage collector\r\n* Hash-maps (objects), numeric and string keys\r\n* Arrays\r\n* Typeof, Sizeof, Keysof\r\n* String concatenation\r\n* Parser/lexer/compiler errors\r\n* Break/Continue statements\r\n* C++/C bindings support for candor\r\n* C++/C bindings documentation\r\n* Dense arrays\r\n\r\nThings to come:\r\n\r\n* Cons strings\r\n* On-stack replacement and profile-based optimizations\r\n* Incremental GC\r\n* Usage in multiple-threads (aka isolates)\r\n* See [TODO](https://github.com/indutny/candor/blob/master/TODO) for more\r\n  up-to-date tasks\r\n\r\n## Contributing\r\n\r\nAny bug-fixes or feature implementations are always welcome! Only one\r\nrestriction is applied to the code - it should follow\r\n[Google C++ Style Guide](http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml).\r\n\r\nWant to get in, but don't feel like you know a lot about designing compilers?\r\nNo problem at all - I prepared a list of papers that may help you understand\r\nthings going in Candor better:\r\n[Compiler-papers](https://github.com/indutny/candor/wiki/Compiler-papers).\r\n\r\n*Please keep in mind, that at the moment all development is going in\r\n[feature-ssa](https://github.com/indutny/candor/tree/feature-ssa) branch.*\r\n\r\n## Credits\r\n\r\nSpecial thanks to [creationix](https://github.com/creationix) for suggesting the\r\nname of this project!\r\n\r\n#### LICENSE\r\n\r\nCopyright (c) 2012, Fedor Indutny.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","tagline":"Experimental VM for a `Candor` language","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}